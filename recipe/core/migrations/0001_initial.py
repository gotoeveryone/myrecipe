# Generated by Django 2.0 on 2017-12-27 15:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(
                    error_messages={
                        'unique': 'A user with that username already exists.'},
                    help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                    max_length=150, unique=True,
                    validators=[
                        django.contrib.auth.validators.UnicodeUsernameValidator()],
                    verbose_name='username')),
                ('first_name', models.CharField(blank=True,
                                                max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True,
                                               max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True,
                                            max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(
                    default=True,
                    help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                    verbose_name='active')),
                ('date_joined', models.DateTimeField(
                    default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(
                    blank=True,
                    help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                    related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(
                    blank=True,
                    help_text='Specific permissions for this user.',
                    related_name='user_set',
                    related_query_name='user',
                    to='auth.Permission',
                    verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'ログインユーザ',
                'verbose_name_plural': 'ログインユーザ',
                'db_table': 'auth_user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cuisine',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('modified', models.DateTimeField()),
                ('created_by', models.CharField(max_length=10)),
                ('modified_by', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=255)),
                ('classification', models.CharField(max_length=20)),
                ('ingestion_kcal', models.IntegerField(blank=True, null=True, validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(9999)])),
                ('create_number_of_times', models.IntegerField(blank=True, null=True, validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(999)])),
            ],
            options={
                'verbose_name': 'メニュー',
                'verbose_name_plural': 'メニュー',
                'db_table': 'cuisine',
            },
        ),
        migrations.CreateModel(
            name='Foodstuff',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('modified', models.DateTimeField()),
                ('created_by', models.CharField(max_length=10)),
                ('modified_by', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=255)),
                ('quantity', models.CharField(max_length=100)),
                ('cuisine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              related_name='foodstuffs', to='core.Cuisine')),
            ],
            options={
                'verbose_name': '食材',
                'verbose_name_plural': '食材',
                'db_table': 'foodstuffs',
            },
        ),
        migrations.CreateModel(
            name='Instruction',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('modified', models.DateTimeField()),
                ('created_by', models.CharField(max_length=10)),
                ('modified_by', models.CharField(max_length=10)),
                ('sort_order', models.IntegerField(validators=[django.core.validators.MinValueValidator(
                    1), django.core.validators.MaxValueValidator(999)], verbose_name='並び順')),
                ('description', models.CharField(
                    max_length=255, verbose_name='手順')),
                ('cuisine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              related_name='instructions', to='core.Cuisine')),
            ],
            options={
                'verbose_name': '調理手順',
                'verbose_name_plural': '調理手順',
                'db_table': 'cooking_instructions',
            },
        ),
    ]

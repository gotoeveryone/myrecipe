name: Myrecipe Build

on: [push]

jobs:
  frontend_code_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.16

      - name: Cache node modules
        uses: actions/cache@v1
        id: frontend_cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-frontend-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.frontend_cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Execute code check
        run: yarn run lint

  backend_code_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.6

      - name: Setup pipenv
        run: pip install pipenv

      - name: Cache virtualenvs
        uses: actions/cache@v1
        id: backend_cache
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.OS }}-backend-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.backend_cache.outputs.cache-hit != 'true'
        run: pipenv install -d

      - name: Execute code check
        run: pipenv run lint

  backend_test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10.13
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: myrecipe
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.6

      - name: Setup pipenv
        run: pip install pipenv

      - name: Cache virtualenvs
        uses: actions/cache@v1
        id: backend_cache
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.OS }}-backend-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.backend_cache.outputs.cache-hit != 'true'
        run: pipenv install -d

      - name: Setup DotEnv
        run: |
          cp .env.example .env
          echo "SECRET_KEY='$(pipenv run kg)'" >> .env

      - name: Execute test
        run: pipenv run test

  notify_slack:
    if: always()
    needs:
      - frontend_code_check
      - backend_code_check
      - backend_test
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v1
      - name: Notify to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          author_name: GitHub Actions
          fields: repo,message,author,ref
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
